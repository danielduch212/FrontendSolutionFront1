# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: App CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    steps:
    
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: install dependencies
      run: npm install
    
    - name: Build Angular app
      run: npm run build --prod
      
    - name: Upload Frontend Artifacts
      uses: actions/upload-artifact@v3
      with: 
        name: Frontend Artifacts
        path: ./dist

    - name: Show Build Artifacts
      run: ls -R ./dist
  
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps: 
      - uses: actions/checkout@v4

      # Download artifacts

      
      - name: Download Frontend Artifacts
        uses: actions/download-artifact@v3
        with: 
          name: Frontend Artifacts
          path: ./dist
          
      #AWS Credentials and uploading
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with: 
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_REGION}}

      #Install AWS CLI
      - name: Install AWS CLI 
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          
      - name: Download Backend Artifacts
        run: aws s3 cp ${{secrets.AWS_S3_BACKEND_PATH}} ./backend/ --recursive
        
      - name: Upload hashed backend and frontend to S3
        run: |
          aws s3 cp ./dist s3://frontendsolutionbucket/${{ github.sha }}/frontend/ --recursive
          aws s3 cp ./backend s3://frontendsolutionbucket/${{ github.sha }}/backend/ --recursive
   
      # Create CloudFront distribution
      - name: Create CloudFront Distribution
        run: |
          DISTRIBUTION_ID=$(aws cloudfront create-distribution \
            --origin-domain-name frontendsolutionbucket.s3.amazonaws.com \
            --default-root-object "${{ github.sha }}/frontend/index.html" \
            --enabled \
            --comment "Automated deployment for version ${{ github.sha }}" \
            --query 'Distribution.Id' --output text)
          echo "CloudFront Distribution ID: $DISTRIBUTION_ID"
          
      # Optional: Invalidate CloudFront cache for the new distribution
      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*"
        

  
    


          
